<div class="col-lg-6">
  <div class="prospectCont">
    <h3>Prospects by Type Comparison</h3>
    <div class="ct-chart" id="prospectsByTypeComparisonBar"></div>
  </div>
</div>
<div class="col-lg-6">
  <div class="prospectCont">
    <h3>Business Prospects</h3>
    <div class="ct-chart" id="businessProspectBar"></div>
  </div>
</div>

<script>
  $(document).ready(function ($) {

    loadBusinessProspectBar();
    loadProspectsByTypeComparison();

    function loadProspectsByTypeComparison() {
      var labels = <%=raw current_org.project_types.pluck(:name) %>;
      var seriesList = <%=raw get_associated_types(results, 'project_type_id') %>;
      loadComparisonCharts(labels, seriesList, '#prospectsByTypeComparisonBar');
    }

    function loadComparisonCharts(labels, seriesList, selector) {
      var labelsHeight = labels.length * 30 * 2;

      new Chartist.Bar(selector, {
        labels: labels,
        series: seriesList
      }, {
        horizontalBars: true,
        height: labelsHeight + 'px',
        axisX: {onlyInteger: true},
        axisY: {offset: 70},
        plugins: [
          Chartist.plugins.tooltip()
        ]
      });
    }

    function loadBusinessProspectBar() {
      var seriesList = <%=raw get_generic_prospect_total(results, 'status', Project::STATUS) %>;
      var total_types = 0.0;
      seriesList.map(function (a) {
        return total_types += a.value;
      });
      var labels = seriesList.map(function (a) {
        return a.meta + ' ' + (a.value/total_types).toPrecision(2) + '%';
      });
      var chart = new Chartist.Pie('#businessProspectBar', {
        series: seriesList,
        labels: labels
      }, {
        donut: true,
        showLabel: true,
//        chartPadding: 60,
        labelOffset: 30,
        labelDirection: 'explode',
        plugins: [
          Chartist.plugins.tooltip()
        ]
      });

      chart.on('draw', function(data) {
        if(data.type === 'slice') {
          var pathLength = data.element._node.getTotalLength();

          data.element.attr({
            'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
          });

          var animationDefinition = {
            'stroke-dashoffset': {
              id: 'anim' + data.index,
              dur: 1000,
              from: -pathLength + 'px',
              to:  '0px',
              easing: Chartist.Svg.Easing.easeOutQuint,
              fill: 'freeze'
            }
          };

          if(data.index !== 0) {
            animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
          }

          data.element.attr({
            'stroke-dashoffset': -pathLength + 'px'
          });
					data.element.animate(animationDefinition, false);
        }
      });

    }

  })
</script>